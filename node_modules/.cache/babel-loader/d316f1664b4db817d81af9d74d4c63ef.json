{"ast":null,"code":"import _classCallCheck from \"/Users/seandees/Desktop/flatfile/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/seandees/Desktop/flatfile/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/seandees/Desktop/flatfile/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/seandees/Desktop/flatfile/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/seandees/Desktop/flatfile/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/seandees/Desktop/flatfile/src/container/App.js\";\nimport React, { Component } from 'react';\nimport Form from '../component/Form/Form';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.inputChange = function (e) {\n      _this.setState({\n        currentInput: e.target.value\n      });\n    };\n\n    _this.addListItem = function (e) {\n      e.preventDefault();\n\n      if (_this.state.currentInput.length > 0 && _this.state.currentInput !== 'Add items') {\n        var currentListItems = _this.state.listItems;\n        currentListItems.push({\n          value: _this.state.currentInput,\n          done: false\n        });\n\n        _this.setState({\n          listItems: currentListItems,\n          numOfTasks: _this.state.numOfTasks + 1\n        }, function () {\n          this.getProgressPercentage();\n        });\n      }\n    };\n\n    _this.removeItem = function (i) {\n      var ItemToRemove = _this.state.listItems;\n      console.log(ItemToRemove); // map through list items, find and remove deleted item and return a new list of items\n      // const filteredState = this.state.listItems.filter((val, index) =>{\n      //   if(index === i){\n      //     ItemToRemove.push(val);\n      //   }\n      //   return index !== i;\n      // });\n      // delete ItemToRemove[i];\n\n      console.log(ItemToRemove); //update list items minus deleted item. if there's only one task left, clear completed task also\n\n      if (_this.state.numOfTasks === 1) {\n        _this.setState({\n          listItems: ItemToRemove,\n          numOfTasks: _this.state.numOfTasks - 1,\n          completed: 0\n        }, function () {\n          this.getProgressPercentage();\n        });\n      } //if the deleted task was completed, decrement compeleted task by one, otherwise just update the list items and decrement the number of tasks\n      else {\n          if (ItemToRemove[0].done === true) {\n            _this.setState({\n              listItems: ItemToRemove,\n              numOfTasks: _this.state.numOfTasks - 1,\n              completed: _this.state.completed - 1\n            }, function () {\n              this.getProgressPercentage();\n            });\n          } else {\n            _this.setState({\n              listItems: ItemToRemove,\n              numOfTasks: _this.state.numOfTasks - 1\n            }, function () {\n              this.getProgressPercentage();\n            });\n          }\n        }\n    };\n\n    _this.getCompletedItem = function (i) {\n      var currentListItems = _this.state.listItems;\n      var getCompletedItem = currentListItems.filter(function (val, index) {\n        return index === i;\n      });\n\n      if (getCompletedItem[0].done === true) {\n        getCompletedItem[0].done = false;\n      } else {\n        getCompletedItem[0].done = true;\n      }\n\n      currentListItems[i] = getCompletedItem[0];\n\n      if (getCompletedItem[0].done === false) {\n        _this.setState({\n          listItems: currentListItems,\n          completed: _this.state.completed - 1\n        }, function () {\n          this.getProgressPercentage();\n        });\n      } else {\n        _this.setState(function (state) {\n          return {\n            listItems: currentListItems,\n            completed: state.completed + 1\n          };\n        });\n\n        _this.setState({\n          listItems: currentListItems,\n          completed: _this.state.completed + 1\n        }, function () {\n          this.getProgressPercentage();\n        });\n      }\n    };\n\n    _this.clearFocus = function (e) {\n      _this.setState({\n        currentInput: \"\"\n      });\n    };\n\n    _this.getProgressPercentage = function () {\n      var completedPercentage = Math.floor(100 * _this.state.completed / _this.state.numOfTasks);\n\n      _this.setState({\n        percentage: completedPercentage\n      });\n    };\n\n    _this.state = {\n      completed: 0,\n      currentInput: \"Add items\",\n      listItems: [],\n      percentage: \"0\",\n      numOfTasks: 0\n    };\n    return _this;\n  } //Captures current state of input field\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Form, {\n        addListItem: this.addListItem,\n        clearFocus: this.clearFocus,\n        completed: this.state.completed,\n        currentInput: this.state.currentInput,\n        getCompletedItem: this.getCompletedItem,\n        inputChange: this.inputChange,\n        listItems: this.state.listItems,\n        numOfTasks: this.state.numOfTasks,\n        percentage: this.state.percentage,\n        removeItem: this.removeItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/seandees/Desktop/flatfile/src/container/App.js"],"names":["React","Component","Form","App","inputChange","e","setState","currentInput","target","value","addListItem","preventDefault","state","length","currentListItems","listItems","push","done","numOfTasks","getProgressPercentage","removeItem","i","ItemToRemove","console","log","completed","getCompletedItem","filter","val","index","clearFocus","completedPercentage","Math","floor","percentage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Form from '../component/Form/Form';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      completed: 0,\n      currentInput: \"Add items\",\n      listItems: [],\n      percentage: `0`,\n      numOfTasks: 0,\n    }\n  }\n\n\n  //Captures current state of input field\n  inputChange = (e) =>{\n    this.setState({currentInput: e.target.value});\n  }\n\n  //Add tasks to list\n  addListItem = (e) => {\n    e.preventDefault();\n    if(this.state.currentInput.length > 0 && this.state.currentInput !== 'Add items'){\n    let currentListItems = this.state.listItems;\n    currentListItems.push({value: this.state.currentInput, done: false});\n      this.setState({listItems: currentListItems, numOfTasks: this.state.numOfTasks + 1}, function () {\n        this.getProgressPercentage();\n    });\n    }\n  }\n\n  //Removes tasks from list\n  removeItem = (i) =>{\n    const ItemToRemove = this.state.listItems;\n    console.log(ItemToRemove)\n    // map through list items, find and remove deleted item and return a new list of items\n    // const filteredState = this.state.listItems.filter((val, index) =>{\n    //   if(index === i){\n    //     ItemToRemove.push(val);\n    //   }\n    //   return index !== i;\n    // });\n    // delete ItemToRemove[i];\n    console.log(ItemToRemove)\n    //update list items minus deleted item. if there's only one task left, clear completed task also\n    if(this.state.numOfTasks === 1){\n      this.setState({listItems: ItemToRemove, numOfTasks: this.state.numOfTasks - 1, completed: 0}, function () {\n        this.getProgressPercentage();\n    });\n    }\n    //if the deleted task was completed, decrement compeleted task by one, otherwise just update the list items and decrement the number of tasks\n    else{\n      if(ItemToRemove[0].done === true){\n        this.setState({listItems: ItemToRemove, numOfTasks: this.state.numOfTasks - 1, completed: this.state.completed - 1}, function () {\n          this.getProgressPercentage();\n      });\n      }else{\n        this.setState({listItems: ItemToRemove, numOfTasks: this.state.numOfTasks - 1}, function () {\n          this.getProgressPercentage();\n      });\n      }\n  \n    }\n\n    \n  \n  }\n\n  //Filter through the list to find the completed/uncompleted list item and set state accordingly.\n  getCompletedItem = (i) =>{\n    let currentListItems = this.state.listItems;\n    let getCompletedItem = currentListItems.filter((val, index) =>{\n      return index === i;\n    });\n\n    if(getCompletedItem[0].done === true){\n      getCompletedItem[0].done  = false;\n    }else{\n      getCompletedItem[0].done = true;\n    }\n    currentListItems[i] = getCompletedItem[0];\n    \n\n    if(getCompletedItem[0].done === false){\n\n      this.setState({listItems: currentListItems, completed: this.state.completed - 1}, function () {\n        this.getProgressPercentage();\n    });\n    }else{\n      this.setState((state) => {\n        return {listItems: currentListItems, completed: state.completed + 1};\n      });\n      this.setState({listItems: currentListItems, completed: this.state.completed + 1}, function () {\n        this.getProgressPercentage();\n    });\n    }\n  }\n\n  //Clears input field on focus\n  clearFocus = (e) =>{\n    this.setState({currentInput: \"\"});\n  }\n\n//updates progress bar based on the number of tasks which were completed\n  getProgressPercentage = () =>{\n    const completedPercentage = Math.floor((100 * this.state.completed) / this.state.numOfTasks);\n    this.setState({percentage: completedPercentage});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form \n            addListItem={this.addListItem}\n            clearFocus={this.clearFocus}\n            completed={this.state.completed}\n            currentInput={this.state.currentInput}\n            getCompletedItem={this.getCompletedItem}\n            inputChange={this.inputChange} \n            listItems={this.state.listItems}\n            numOfTasks={this.state.numOfTasks}\n            percentage={this.state.percentage}\n            removeItem={this.removeItem}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}